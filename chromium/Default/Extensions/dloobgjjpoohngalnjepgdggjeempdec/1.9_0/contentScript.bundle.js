(()=>{"use strict";function e(e,n){return Array(n+1).join(e)}var n=["ADDRESS","ARTICLE","ASIDE","AUDIO","BLOCKQUOTE","BODY","CANVAS","CENTER","DD","DIR","DIV","DL","DT","FIELDSET","FIGCAPTION","FIGURE","FOOTER","FORM","FRAMESET","H1","H2","H3","H4","H5","H6","HEADER","HGROUP","HR","HTML","ISINDEX","LI","MAIN","MENU","NAV","NOFRAMES","NOSCRIPT","OL","OUTPUT","P","PRE","SECTION","TABLE","TBODY","TD","TFOOT","TH","THEAD","TR","UL"];function t(e){return o(e,n)}var r=["AREA","BASE","BR","COL","COMMAND","EMBED","HR","IMG","INPUT","KEYGEN","LINK","META","PARAM","SOURCE","TRACK","WBR"];function i(e){return o(e,r)}var a=["A","TABLE","THEAD","TBODY","TFOOT","TH","TD","IFRAME","SCRIPT","AUDIO","VIDEO"];function o(e,n){return n.indexOf(e.nodeName)>=0}function s(e,n){return e.getElementsByTagName&&n.some((function(n){return e.getElementsByTagName(n).length}))}var l={};function c(e){return e?e.replace(/(\n+\s*)+/g,"\n"):""}function p(e,n){for(const t of e.children)if(t.tagName===n)return t;return null}l.paragraph={filter:"p",replacement:function(e){return"\n\n"+e+"\n\n"}},l.lineBreak={filter:"br",replacement:function(e,n,t){return t.br+"\n"}},l.heading={filter:["h1","h2","h3","h4","h5","h6"],replacement:function(n,t,r){var i=Number(t.nodeName.charAt(1));return"setext"===r.headingStyle&&i<3?"\n\n"+n+"\n"+e(1===i?"=":"-",n.length)+"\n\n":"\n\n"+e("#",i)+" "+n+"\n\n"}},l.blockquote={filter:"blockquote",replacement:function(e){return"\n\n"+(e=(e=e.replace(/^\n+|\n+$/g,"")).replace(/^/gm,"> "))+"\n\n"}},l.list={filter:["ul","ol"],replacement:function(e,n){var t=n.parentNode;return"LI"===t.nodeName&&t.lastElementChild===n?"\n"+e:"\n\n"+e+"\n\n"}},l.listItem={filter:"li",replacement:function(e,n,t){e=e.replace(/^\n+/,"").replace(/\n+$/,"\n").replace(/\n/gm,"\n    ");var r=t.bulletListMarker+" ",i=n.parentNode;if("OL"===i.nodeName){var a=i.getAttribute("start"),o=Array.prototype.indexOf.call(i.children,n);r=(a?Number(a)+o:o+1)+". "}return r+e+(n.nextSibling&&!/\n$/.test(e)?"\n":"")}},l.indentedCodeBlock={filter:function(e,n){return"indented"===n.codeBlockStyle&&"PRE"===e.nodeName&&e.firstChild&&p(e,"CODE")},replacement:function(e,n,t){var r=((p(n,"CODE").getAttribute("class")||"").match(/language-(\S+)/)||[null,""])[1];return console.log("indentedCodeBlock"),"\n\n```"+r+"\n"+p(n,"CODE").textContent.replace(/\n/g,"\n")+"```\n\n"}},l.fencedCodeBlock={filter:function(e,n){return"fenced"===n.codeBlockStyle&&"PRE"===e.nodeName&&e.firstChild&&p(e,"CODE")},replacement:function(n,t,r){console.log("fencedCodeBlock");for(var i,a=((p(t,"CODE").getAttribute("class")||"").match(/language-(\S+)/)||[null,""])[1],o=p(t,"CODE").textContent,s=r.fence.charAt(0),l=3,c=new RegExp("^"+s+"{3,}","gm");i=c.exec(o);)i[0].length>=l&&(l=i[0].length+1);var d=e(s,l);return"\n\n"+d+"```"+a+"\n"+o.replace(/\n$/,"")+"\n```"+d+"\n\n"}},l.horizontalRule={filter:"hr",replacement:function(e,n,t){return"\n\n"+t.hr+"\n\n"}},l.inlineLink={filter:function(e,n){return"inlined"===n.linkStyle&&"A"===e.nodeName&&e.getAttribute("href")},replacement:function(e,n){var t=n.getAttribute("href"),r=c(n.getAttribute("title"));return r&&(r=' "'+r+'"'),"["+e+"]("+t+r+")"}},l.referenceLink={filter:function(e,n){return"referenced"===n.linkStyle&&"A"===e.nodeName&&e.getAttribute("href")},replacement:function(e,n,t){var r,i,a=n.getAttribute("href"),o=c(n.getAttribute("title"));switch(o&&(o=' "'+o+'"'),t.linkReferenceStyle){case"collapsed":r="["+e+"][]",i="["+e+"]: "+a+o;break;case"shortcut":r="["+e+"]",i="["+e+"]: "+a+o;break;default:var s=this.references.length+1;r="["+e+"]["+s+"]",i="["+s+"]: "+a+o}return this.references.push(i),r},references:[],append:function(e){var n="";return this.references.length&&(n="\n\n"+this.references.join("\n")+"\n\n",this.references=[]),n}},l.emphasis={filter:["em","i"],replacement:function(e,n,t){return e.trim()?t.emDelimiter+e+t.emDelimiter:""}},l.strong={filter:["strong","b"],replacement:function(e,n,t){return e.trim()?t.strongDelimiter+e+t.strongDelimiter:""}},l.code={filter:function(e){var n=e.previousSibling||e.nextSibling,t="PRE"===e.parentNode.nodeName&&!n;return"CODE"===e.nodeName&&!t},replacement:function(e){if(!e)return"";e=e.replace(/\r?\n|\r/g," ");for(var n=/^`|^ .*?[^ ].* $|`$/.test(e)?" ":"",t="`",r=e.match(/`+/gm)||[];-1!==r.indexOf(t);)t+="`";return t+n+e+n+t}},l.image={filter:"img",replacement:function(e,n){var t=c(n.getAttribute("alt")),r=n.getAttribute("src")||"",i=c(n.getAttribute("title"));return r?"!["+t+"]("+r+(i?' "'+i+'"':"")+")":""}};const d=l;function u(e){for(var n in this.options=e,this._keep=[],this._remove=[],this.blankRule={replacement:e.blankReplacement},this.keepReplacement=e.keepReplacement,this.defaultRule={replacement:e.defaultReplacement},this.array=[],e.rules)this.array.push(e.rules[n])}function h(e,n,t){for(var r=0;r<e.length;r++){var i=e[r];if(f(i,n,t))return i}}function f(e,n,t){var r=e.filter;if("string"==typeof r){if(r===n.nodeName.toLowerCase())return!0}else if(Array.isArray(r)){if(r.indexOf(n.nodeName.toLowerCase())>-1)return!0}else{if("function"!=typeof r)throw new TypeError("`filter` needs to be a string, array, or function");if(r.call(e,n,t))return!0}}function m(e){var n=e.nextSibling||e.parentNode;return e.parentNode.removeChild(e),n}function g(e,n,t){return e&&e.parentNode===n||t(n)?n.nextSibling||n.parentNode:n.firstChild||n.nextSibling||n.parentNode}u.prototype={add:function(e,n){this.array.unshift(n)},keep:function(e){this._keep.unshift({filter:e,replacement:this.keepReplacement})},remove:function(e){this._remove.unshift({filter:e,replacement:function(){return""}})},forNode:function(e){return e.isBlank?this.blankRule:(n=h(this.array,e,this.options))||(n=h(this._keep,e,this.options))||(n=h(this._remove,e,this.options))?n:this.defaultRule;var n},forEach:function(e){for(var n=0;n<this.array.length;n++)e(this.array[n],n)}};const v=function(e){var n=e.element,t=e.isBlock,r=e.isVoid,i=e.isPre||function(e){return"PRE"===e.nodeName};if(n.firstChild&&!i(n)){for(var a=null,o=!1,s=null,l=g(s,n,i);l!==n;){if(3===l.nodeType||4===l.nodeType){var c=l.data.replace(/[ \r\n\t]+/g," ");if(a&&!/ $/.test(a.data)||o||" "!==c[0]||(c=c.substr(1)),!c){l=m(l);continue}l.data=c,a=l}else{if(1!==l.nodeType){l=m(l);continue}t(l)||"BR"===l.nodeName?(a&&(a.data=a.data.replace(/ $/,"")),a=null,o=!1):r(l)||i(l)?(a=null,o=!0):a&&(o=!1)}var p=g(s,l,i);s=l,l=p}a&&(a.data=a.data.replace(/ $/,""),a.data||m(a))}};var E="undefined"!=typeof window?window:{};const w=function(){var e=E.DOMParser,n=!1;try{(new e).parseFromString("","text/html")&&(n=!0)}catch(e){}return n}()?E.DOMParser:(A=function(){},process.browser&&(function(){var e=!1;try{document.implementation.createHTMLDocument("").open()}catch(n){window.ActiveXObject&&(e=!0)}return e}()?A.prototype.parseFromString=function(e){var n=new window.ActiveXObject("htmlfile");return n.designMode="on",n.open(),n.write(e),n.close(),n}:A.prototype.parseFromString=function(e){var n=document.implementation.createHTMLDocument("");return n.open(),n.write(e),n.close(),n}),A);var A,y;function b(e,n){var r;"string"==typeof e?r=(y=y||new w).parseFromString('<x-turndown id="turndown-root">'+e+"</x-turndown>","text/html").getElementById("turndown-root"):r=e.cloneNode(!0);return v({element:r,isBlock:t,isVoid:i,isPre:n.preformattedCode?k:null}),r}function k(e){return"PRE"===e.nodeName||"CODE"===e.nodeName}function x(e,n){return e.isBlock=t(e),e.isCode="CODE"===e.nodeName||e.parentNode.isCode,e.isBlank=function(e){return!i(e)&&!function(e){return o(e,a)}(e)&&/^\s*$/i.test(e.textContent)&&!function(e){return s(e,r)}(e)&&!function(e){return s(e,a)}(e)}(e),e.flankingWhitespace=function(e,n){if(e.isBlock||n.preformattedCode&&e.isCode)return{leading:"",trailing:""};var t=(r=e.textContent,i=r.match(/^(([ \t\r\n]*)(\s*))[\s\S]*?((\s*?)([ \t\r\n]*))$/),{leading:i[1],leadingAscii:i[2],leadingNonAscii:i[3],trailing:i[4],trailingNonAscii:i[5],trailingAscii:i[6]});var r,i;t.leadingAscii&&C("left",e,n)&&(t.leading=t.leadingNonAscii);t.trailingAscii&&C("right",e,n)&&(t.trailing=t.trailingNonAscii);return{leading:t.leading,trailing:t.trailing}}(e,n),e}function C(e,n,r){var i,a,o;return"left"===e?(i=n.previousSibling,a=/ $/):(i=n.nextSibling,a=/^ /),i&&(3===i.nodeType?o=a.test(i.nodeValue):r.preformattedCode&&"CODE"===i.nodeName?o=!1:1!==i.nodeType||t(i)||(o=a.test(i.textContent))),o}var B=Array.prototype.reduce,T=[[/\\/g,"\\\\"],[/\*/g,"\\*"],[/^-/g,"\\-"],[/^\+ /g,"\\+ "],[/^(=+)/g,"\\$1"],[/^(#{1,6}) /g,"\\$1 "],[/`/g,"\\`"],[/^~~~/g,"\\~~~"],[/\[/g,"\\["],[/\]/g,"\\]"],[/^>/g,"\\>"],[/_/g,"\\_"],[/^(\d+)\. /g,"$1\\. "]];function N(e){if(!(this instanceof N))return new N(e);var n={rules:d,headingStyle:"setext",hr:"* * *",bulletListMarker:"*",codeBlockStyle:"indented",fence:"```",emDelimiter:"_",strongDelimiter:"**",linkStyle:"inlined",linkReferenceStyle:"full",br:"  ",preformattedCode:!1,blankReplacement:function(e,n){return n.isBlock?"\n\n":""},keepReplacement:function(e,n){return n.isBlock?"\n\n"+n.outerHTML+"\n\n":n.outerHTML},defaultReplacement:function(e,n){return n.isBlock?"\n\n"+e+"\n\n":e}};this.options=function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])}return e}({},n,e),this.rules=new u(this.options)}function j(e){var n=this;return B.call(e.childNodes,(function(e,t){var r="";return 3===(t=new x(t,n.options)).nodeType?r=t.nodeValue:1===t.nodeType&&(r=O.call(n,t)),R(e,r)}),"")}function P(e){var n=this;return this.rules.forEach((function(t){"function"==typeof t.append&&(e=R(e,t.append(n.options)))})),e.replace(/^[\t\r\n]+/,"").replace(/[\t\r\n\s]+$/,"")}function O(e){var n=this.rules.forNode(e),t=j.call(this,e),r=e.flankingWhitespace;return(r.leading||r.trailing)&&(t=t.trim()),r.leading+n.replacement(t,e,this.options)+r.trailing}function R(e,n){var t=function(e){for(var n=e.length;n>0&&"\n"===e[n-1];)n--;return e.substring(0,n)}(e),r=n.replace(/^\n*/,""),i=Math.max(e.length-t.length,n.length-r.length);return t+"\n\n".substring(0,i)+r}N.prototype={turndown:function(e){if(!function(e){return null!=e&&("string"==typeof e||e.nodeType&&(1===e.nodeType||9===e.nodeType||11===e.nodeType))}(e))throw new TypeError(e+" is not a string, or an element/document/fragment node.");if(""===e)return"";var n=j.call(this,new b(e,this.options));return P.call(this,n)},use:function(e){if(Array.isArray(e))for(var n=0;n<e.length;n++)this.use(e[n]);else{if("function"!=typeof e)throw new TypeError("plugin must be a Function or an Array of Functions");e(this)}return this},addRule:function(e,n){return this.rules.add(e,n),this},keep:function(e){return this.rules.keep(e),this},remove:function(e){return this.rules.remove(e),this},escape:function(e){return T.reduce((function(e,n){return e.replace(n[0],n[1])}),e)}};var L=Array.prototype.indexOf,D=Array.prototype.every,S={};function I(e){var n,t,r=e.parentNode;return"THEAD"===r.nodeName||r.firstChild===e&&("TABLE"===r.nodeName||(t=(n=r).previousSibling,"TBODY"===n.nodeName&&(!t||"THEAD"===t.nodeName&&/^\s*$/i.test(t.textContent))))&&D.call(e.childNodes,(function(e){return"TH"===e.nodeName}))}function F(e,n){var t=" ";return 0===L.call(n.parentNode.childNodes,n)&&(t="| "),t+e+" |"}function M(e){for(var n in e.keep((function(e){return"TABLE"===e.nodeName&&!I(e.rows[0])})),S)e.addRule(n,S[n])}function H(e){e.addRule("taskListItems",{filter:function(e){return"checkbox"===e.type&&"LI"===e.parentNode.nodeName},replacement:function(e,n){return(n.checked?"[x]":"[ ]")+" "}})}function _(e,n){var t=(n=n||document).querySelectorAll(e);return 1==t.length?Array.prototype.slice.call(t)[0]:Array.prototype.slice.call(t)}function $(e){return e=(e=e.replace(/<\/?div[^>]*>/g,"")).replace(/<button class="flex ml-auto gap-2">(.*?)<\/button>/g,"<br>")}function G(){var e=window.turndownService=new N;e.addRule("strikethrough",{filter:["del","s","strike"],replacement:function(e){return"~~"+e+"~~"}}),e.use(M),e.use(H)}S.tableCell={filter:["th","td"],replacement:function(e,n){return F(e,n)}},S.tableRow={filter:"tr",replacement:function(e,n){var t="",r={left:":--",right:"--:",center:":-:"};if(I(n))for(var i=0;i<n.childNodes.length;i++){var a="---",o=(n.childNodes[i].getAttribute("align")||"").toLowerCase();o&&(a=r[o]||a),t+=F(a,n.childNodes[i])}return"\n"+e+(t?"\n"+t:"")}},S.table={filter:function(e){return"TABLE"===e.nodeName&&I(e.rows[0])},replacement:function(e){return"\n\n"+(e=e.replace("\n\n","\n"))+"\n\n"}},S.tableSection={filter:["thead","tbody","tfoot"],replacement:function(e){return e}},function(){G(),document.body.insertAdjacentHTML("beforeend",""),document.body.insertAdjacentHTML("afterend",'<div id="btn-open-sidebar" class="menu-btn"><svg\n    t="1677417891624"\n    class="icon"\n    viewBox="0 0 1280 1024"\n    version="1.1"\n    xmlns="http://www.w3.org/2000/svg"\n    width="40"\n    height="40"\n  >\n    <path\n      d="M1187.6 118.2H92.4C41.4 118.2 0 159.6 0 210.4v603c0 51 41.4 92.4 92.4 92.4h1095.4c51 0 92.4-41.4 92.2-92.2V210.4c0-50.8-41.4-92.2-92.4-92.2zM677 721.2H554v-240l-123 153.8-123-153.8v240H184.6V302.8h123l123 153.8 123-153.8h123v418.4z m270.6 6.2L763 512H886V302.8h123V512H1132z"\n    ></path>\n  </svg></div>\n\n    <div class="sidebar dark:bg-[#444654]" id="sidebar">\n    <h4 class="header-text">ChatGPT to Markdown</h4>\n  <div id="btn-close-sidebar" class="close-btn">×</div>\n\n  <div>\n        <textarea\n          id="markdown-textarea"\n          cols="30"\n          rows="10"\n          class="dark:text-gray-100 dark:bg-gray-800"\n        ></textarea>\n      </div>\n      <div class="operation-area">\n        <button id="btn-copy-markdown" class="btn flex justify-center gap-2 btn-primary mr-2">\n          Copy\n          <span id="copy-tooltip" class="tooltip" title="Text Copied!" ></span>\n        </button>\n        <button id="btn-export-markdown" class="btn flex justify-center gap-2 btn-neutral border-0 md:border"\n        >\n          Export Markdown\n        </button>\n      </div>\n\n      <div class="link-area">\n        Powered by  <a href="http://chatopenai.pro/" target="_blank">chatopenai.pro</a>\n      </div>\n  \n</div>');let e=_("#sidebar"),n=_("#btn-copy-markdown"),t=_("#btn-export-markdown"),r=_("#markdown-textarea"),i=_("#copy-tooltip");n.addEventListener("click",(()=>{const e=r.value;""!==e&&(function(e){navigator.clipboard.writeText(e)}(e),-1===i.classList.value.indexOf("active")&&function(e){const n=2e3,t=100;s(e,"active"),setTimeout((function(){s(e,"inactive"),setTimeout((function(){s(e,"none")}),t)}),n)}(i))})),t.addEventListener("click",(()=>{const e=r.value;""!==e&&function({str:e,fileName:n="download",extensionName:t="text",mimeType:r="text/plain"}){var i=document.createElement("a");i.download=n+"."+t;var a=new Blob([e],{type:r});i.href=window.URL.createObjectURL(a),i.click()}({str:e,fileName:document.title,extensionName:"md",mimeType:"text/markdown"})}));let a=_("#btn-open-sidebar"),o=_("#btn-close-sidebar");function s(e,n){switch(n){case"active":e.classList.remove("inactive"),e.classList.add("active");break;case"inactive":e.classList.remove("active"),e.classList.add("inactive");break;case"none":e.classList.remove("active"),e.classList.remove("inactive")}}a.addEventListener("click",(()=>{r.value=function(){let e=_("#__next .whitespace-pre-wrap");e&&!Array.isArray(e)&&(e=[e]);let n="";return e.forEach(((t,r)=>{const i=t.querySelector(".markdown");n+=i?"**ChatGPT:**\n\n":"**You:**\n\n";let a="";if(i)a=t.outerHTML,a=$(a),a=window.turndownService.turndown(a);else{a=t.firstChild.innerHTML;const e=a.split("\n");a=e.map((e=>`${e}`)).join("\n")}let o=r===e.length-1?"":"\n\n* * *\n\n";n+=a+o})),n}(),e.classList.add("show")})),o.addEventListener("click",(()=>{e.classList.remove("show")}))}(),function(){let e='<div class="markdown prose w-full break-words dark:prose-invert light"><p>在这篇博客中，我将向大家介绍如何使用Python和ChatGPT API开发一个智能聊天程序。</p><p>ChatGPT是一种基于人工智能技术的自然语言处理工具，它可以生成自然流畅的语言并进行对话。使用ChatGPT API，我们可以轻松地将这种人工智能技术集成到我们的Python应用程序中。</p><p>以下是实现智能聊天程序的步骤：</p><h2>步骤1：安装必要的Python库</h2><p>在开始之前，我们需要安装一些必要的Python库。在终端中运行以下命令：</p><pre><div class="bg-black mb-4 rounded-md"><div class="flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans"><button class="flex ml-auto gap-2"><svg stroke="currentColor" fill="none" stroke-width="2" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path><rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect></svg>Copy code</button></div><div class="p-4 overflow-y-auto"><code class="!whitespace-pre hljs">pip install openai\npip install python-dotenv\npip install Flask\n</code></div></div></pre><p>这些库分别是：</p><ul><li><code>openai</code>：提供了对ChatGPT API的访问和控制；</li><li><code>python-dotenv</code>：用于将API密钥等敏感信息保存在环境变量中；</li><li><code>Flask</code>：用于实现Web应用程序。</li></ul><h2>步骤2：获取API密钥</h2><p>在使用ChatGPT API之前，我们需要获取一个API密钥。您可以通过访问<a href="https://beta.openai.com/%E6%9D%A5%E8%8E%B7%E5%8F%96API%E5%AF%86%E9%92%A5%E3%80%82%E5%9C%A8%E8%BF%99%E9%87%8C%EF%BC%8C%E6%82%A8%E9%9C%80%E8%A6%81%E6%8F%90%E4%BE%9B%E6%9C%89%E5%85%B3%E6%82%A8%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BF%A1%E6%81%AF%EF%BC%8C%E4%BE%8B%E5%A6%82%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%90%8D%E7%A7%B0%E3%80%81%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%8F%E8%BF%B0%E5%92%8C%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8FURL%E7%AD%89%E3%80%82%E4%B8%80%E6%97%A6%E6%82%A8%E7%9A%84%E7%94%B3%E8%AF%B7%E8%A2%AB%E6%89%B9%E5%87%86%EF%BC%8C%E6%82%A8%E5%B0%86%E6%94%B6%E5%88%B0%E4%B8%80%E4%B8%AAAPI%E5%AF%86%E9%92%A5%EF%BC%8C%E7%94%A8%E4%BA%8E%E6%8E%88%E6%9D%83%E6%82%A8%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E8%AE%BF%E9%97%AEChatGPT" target="_new">https://beta.openai.com/来获取API密钥。在这里，您需要提供有关您的应用程序的一些信息，例如应用程序名称、应用程序描述和应用程序URL等。一旦您的申请被批准，您将收到一个API密钥，用于授权您的应用程序访问ChatGPT</a> API。</p><h2>步骤3：创建Flask应用程序</h2><p>现在，我们将使用Flask框架创建一个Web应用程序。在您的代码编辑器中创建一个名为app.py的文件，并在其中编写以下代码：</p><pre><div class="bg-black mb-4 rounded-md"><div class="flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans"><span class="">python</span><button class="flex ml-auto gap-2"><svg stroke="currentColor" fill="none" stroke-width="2" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path><rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect></svg>Copy code</button></div><div class="p-4 overflow-y-auto"><code class="!whitespace-pre hljs language-python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, jsonify\n<span class="hljs-keyword">from</span> dotenv <span class="hljs-keyword">import</span> load_dotenv\n<span class="hljs-keyword">import</span> openai\n<span class="hljs-keyword">import</span> os\n\n<span class="hljs-comment"># 加载环境变量</span>\nload_dotenv()\n\n<span class="hljs-comment"># 设置OpenAI API密钥</span>\nopenai.api_key = os.getenv(<span class="hljs-string">"OPENAI_API_KEY"</span>)\n\n<span class="hljs-comment"># 初始化Flask应用程序</span>\napp = Flask(__name__)\n\n<span class="hljs-comment"># 定义POST路由</span>\n<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">\'/chat\'</span>, methods=[<span class="hljs-string">\'POST\'</span>]</span>)</span>\n<span class="hljs-keyword">def</span> <span class="hljs-title function_">chat</span>():\n    <span class="hljs-comment"># 获取POST请求的消息</span>\n    message = request.json[<span class="hljs-string">\'message\'</span>]\n    \n    <span class="hljs-comment"># 使用ChatGPT API生成响应消息</span>\n    response = openai.Completion.create(\n        engine=<span class="hljs-string">"text-davinci-002"</span>,\n        prompt=message,\n        max_tokens=<span class="hljs-number">1024</span>,\n        n=<span class="hljs-number">1</span>,\n        stop=<span class="hljs-literal">None</span>,\n        temperature=<span class="hljs-number">0.5</span>\n    )\n    \n    <span class="hljs-comment"># 将响应消息发送回客户端</span>\n    <span class="hljs-keyword">return</span> jsonify(response.choices[<span class="hljs-number">0</span>].text.strip())\n</code></div></div></pre><p>在这里，我们首先加载了我们保存API密钥的.env文件。然后，我们初始化了一个Flask应用程序并定义了一个名为chat的路由。在这个路由中，我们使用POST请求获取消息，然后使用ChatGPT API生成响应消息。最后，我们将响应消息作为JSON对象发送回客户端。</p><h2>步骤4：运行应用程序</h2><p>现在，我们已经完成了</p><pre><div class="bg-black rounded-md mb-4"><div class="flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md"><span>python</span><button class="flex ml-auto gap-2"><svg stroke="currentColor" fill="none" stroke-width="2" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path><rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect></svg>Copy code</button></div><div class="p-4 overflow-y-auto"><code class="!whitespace-pre hljs language-python"><span class="hljs-built_in">print</span>(<span class="hljs-string">"这是一段Python代码"</span>)\n    </code></div></div></pre></div>';e='<div class="markdown prose w-full break-words dark:prose-invert light"><p>以下是一些常用的Markdown标签及其使用示例，包括嵌套列表：</p><ol><li><p>标题</p><h1>一级标题</h1><h2>二级标题</h2><h3>三级标题</h3><h4>四级标题</h4><h5>五级标题</h5><h6>六级标题</h6></li><li><p>段落和换行\n    这是一个段落。</p><p>这是另一个段落。</p><p>这是同一行内的换行符。&lt;br&gt;</p></li><li><p>强调和斜体\n    <em>斜体文本</em>\n    <em>斜体文本</em></p></li><li><p>粗体\n    <strong>粗体文本</strong>\n    <strong>粗体文本</strong></p></li><li><p>删除线\n    <del>删除线文本</del></p></li><li><p>引用</p><blockquote><p>这是引用的文本。</p></blockquote></li><li><p>列表</p><ul><li><p>无序列表项 1</p></li><li><p>无序列表项 2</p></li><li><p>无序列表项 3</p></li></ul><ol><li>有序列表项 1</li><li>有序列表项 2</li><li>有序列表项 3</li></ol></li><li><p>嵌套列表</p><ul><li>主要项目<ul><li>子项目 1</li><li>子项目 2</li></ul></li><li>另一个主要项目<ol><li>子项目 1</li><li>子项目 2</li></ol></li></ul></li><li><p>链接\n    <a href="https://www.example.com" target="_new">链接文字</a></p></li><li><p>图片\n    <img src="image.jpg" alt="替代文本"></p></li><li><p>代码\n    <code>单行代码</code></p><pre><div class="bg-black rounded-md mb-4"><div class="flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md"><span>python</span><button class="flex ml-auto gap-2"><svg stroke="currentColor" fill="none" stroke-width="2" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path><rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect></svg>Copy code</button></div><div class="p-4 overflow-y-auto"><code class="!whitespace-pre hljs language-python"><span class="hljs-comment"># 多行代码</span>\n    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>():\n        <span class="hljs-built_in">print</span>(<span class="hljs-string">"Hello, World!"</span>)\n    </code></div></div></pre></li><li><h2>水平线</h2></li></ol><p>这只是一些常用的Markdown标签示例，Markdown还有其他更多功能和标签可供使用。希望这可以帮助你开始使用Markdown语法。</p></div>',G(),e=$(e),e=window.turndownService.turndown(e),console.log("markdown==",e)}()})();